# This is a basic workflow to help you get started with Actions

name: Build java projects

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  generate_jars_from_src:
    name: Compile source code and generate jars
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
          ref: ${{ github.head_ref }}
      
    - name: Compile source code
      run: |
        rootPath=$(pwd)

        echo "---------------------------------------------------------------------------------"
        echo "Compiling source code..."
        compileSrc(){
          cd $rootPath

          projectPath="$rootPath/$1"
          srcPath="$projectPath/src"
          binPath="$projectPath/bin"

          echo "---------------------------------------------------------------------------------"
          echo "Project name: $1"
          echo "Project path: $projectPath"
          echo "Project src path: $srcPath"
          echo "Project bin path: $binPath"
          echo "---------------------------------------------------------------------------------"

          cd $srcPath

          find -name "*.java" > sources.txt
          mkdir -p "$binPath/classes"
          javac -d "$binPath/classes/" @sources.txt
          unlink sources.txt

          echo "COMPILATION FOR PROJECT $1 FINISHED"
          cd $rootPath
        }
        compileSrc "proj1"
        compileSrc "proj2"
        echo "---------------------------------------------------------------------------------"
        echo "COMPILED SOURCE CODE"
        echo "---------------------------------------------------------------------------------"
    
    - name: Generate jars using manifests
      run: |
        rootPath=$(pwd)

        echo "---------------------------------------------------------------------------------"
        echo "Generating jars using manifests..."
        echo "---------------------------------------------------------------------------------"
        generateJar(){
          cd $rootPath

          projectPath="$rootPath/$1"
          srcPath="$projectPath/src"
          binPath="$projectPath/bin"

          if [ -z "$2" ]
          then
                echo "No other project was linked"
          else
                linkedProjectClassPath="$rootPath/$2/bin/classes/"
                echo "Linked other project"
          fi

          cd "$binPath/manifests"

          for file in *.mf; do(
              fileName="$(basename -s .mf $file)";
              echo $file;
              
              cd ../classes/
              if [ -z "$2" ]
              then
                    jar cfm "../$fileName.jar" "../manifests/$file" "./";
              else
                    jar cfm "../$fileName.jar" "../manifests/$file" "./" "$linkedProjectClassPath";
              fi
              cd ../manifests/
          ) done

          echo "Generated $fileName.jar"

          cd $rootPath
        }
        generateJar "proj1" "proj2"
        generateJar "proj2"
        echo "---------------------------------------------------------------------------------"
        echo "GENERATED JARS USING MANIFESTS"
        echo "---------------------------------------------------------------------------------"
        
    - name: Clean projects
      run: |
        rootPath=$(pwd)
        echo "---------------------------------------------------------------------------------"
        echo "Clean projects..."
        clean(){
          cd $rootPath

          projectPath="$rootPath/$1"

          rm -rf "$projectPath/bin/classes"
        }
        clean "proj1"
        clean "proj2"
        echo "---------------------------------------------------------------------------------"
        echo "CLEANED PROJECTS"
        echo "---------------------------------------------------------------------------------"
      
    - name: Auto commit
      uses: stefanzweifel/git-auto-commit-action@v4.4.0
      with:
        # Required
        commit_message: Auto-update binaries

        # Optional commit user and author settings
        commit_user_name: Git Auto Commit Bot
        commit_user_email: git-auto-commit-bot@github.com
        commit_author: Git Auto Commit Bot  <git-auto-commit-bot@github.com>
          
        # Optional: Disable dirty check and always try to create a commit and push
        skip_dirty_check: true


