# This is a basic workflow to help you get started with Actions

name: Build java projects

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  generate_jars_from_src:
    name: Compile source code and generate jars
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
          ref: ${{ github.head_ref }}
      
    - name: Compile source code
      run: |
        pwd
        compileSrc(){
          rootPath=$(pwd)

          cd $0
          srcPath=$(pwd)
          cd $rootPath

          cd $1
          binPath=$(pwd)


          cd $srcPath

          find -name "*.java" > sources.txt
          mkdir -p "$binPath/classes"
          javac -d "$binPath/classes/" @sources.txt
          unlink sources.txt

          cd rootPath
        }
        compileSrc proj1/src/ proj1/bin/
        compileSrc proj2/src/ proj2/bin/
    
    - name: Generate jars from manifest
      run: |
        generateJar(){
          rootPath=$(pwd)

          cd $0
          srcPath=$(pwd)
          cd $rootPath

          cd $1
          binPath=$(pwd)

          cd $binPath/manifests

          for file in *.mf; do(
              fileName="$(basename -s .mf $file)";
              echo $file;
              
              cd ../classes/
              jar cfm "../$fileName.jar" "../manifests/$file" "./";
              cd ../manifests/
          ) done

          cd $rootPath
        }
        generateJar proj1/src/ proj1/bin/
        generateJar proj2/src/ proj2/bin/
        
    - name: Delete .class files
      run: |
        rm -rf bin/classes
      
    - name: Auto commit
      uses: stefanzweifel/git-auto-commit-action@v4.4.0
      with:
        # Required
        commit_message: Auto-update binaries

        # Optional commit user and author settings
        commit_user_name: Git Auto Commit Bot
        commit_user_email: git-auto-commit-bot@github.com
        commit_author: Git Auto Commit Bot  <git-auto-commit-bot@github.com>
          
        # Optional: Disable dirty check and always try to create a commit and push
        skip_dirty_check: true


